@{

	// View
	View = this;
	SetClientVar("login", LoginStatus);

	// Global Page Rendering event
	Page_Rendering();

	// Page Render event
	Transactions_View.Page_Render();

	// Check action result
	if (Transactions_View.ActionResult is EmptyResult) { // Terminate page
		return;
	}

	// Layout
	Layout = "_Layout";

	// Local variables (Temp data)
	#pragma warning disable 168
	string sqlWrk, filterWrk, whereWrk, curVal;
	List<Dictionary<string, object>> rswrk;
	string[] arWrk;
	List<object> listWrk;
	Func<string> lookupFilter;
	#pragma warning restore 168
}
@if (!Transactions_View.IsExport()) {
<script>
var fTransactionsview, currentPageID;
loadjs.ready("head", function() {

	// Form object
	currentPageID = ew.PAGE_ID = "view";
	fTransactionsview = currentForm = new ew.Form("fTransactionsview", "view");
	loadjs.done("fTransactionsview");
});
</script>
<script>
loadjs.ready("head", function() {

	// Client script
	// Write your client script here, no need to add script tags.

});
</script>
}
@if (!Transactions_View.IsExport()) {
<div class="btn-toolbar ew-toolbar">
	@Transactions_View.ExportOptions.RenderBody()
	@Transactions_View.OtherOptions.RenderBody()
	<div class="clearfix"></div>
</div>
}
@Transactions_View.ShowPageHeader()
@Transactions_View.ShowMessages()
@if (!Transactions_View.IsModal) {
if (!Transactions_View.IsExport()) {
<form name="ew-pager-form" class="form-inline ew-form ew-pager-form" action="@AppPath(CurrentPageName())">
@Transactions_View.Pager.Render()
<div class="clearfix"></div>
</form>
}
}
<form name="fTransactionsview" id="fTransactionsview" class="form-inline ew-form ew-view-form" method="post">
@if (Transactions_View.CheckToken) {
	@Html.AntiForgeryToken()
}
<input type="hidden" name="modal" value="@ConvertToInt(Transactions_View.IsModal)">
<table class="table table-striped table-sm ew-view-table">
@if (Transactions_View.TransactionID.Visible) { // Transactions_View.TransactionID.Visible (begin)
	<tr id="r_TransactionID">
		<td class="@(Transactions_View.TableLeftColumnClass)"><span id="elh_Transactions_TransactionID">@Html.Raw(Transactions_View.TransactionID.Caption)</span></td>
		<td data-name="TransactionID" @Html.Raw(Transactions_View.TransactionID.CellAttributes)>
<span id="el_Transactions_TransactionID">
<span @Html.Raw(Transactions_View.TransactionID.ViewAttributes)>@Html.Raw(Transactions_View.TransactionID.GetViewValue())</span>
</span>
</td>
	</tr>
} @* Transactions_View.TransactionID.Visible (end) *@
@if (Transactions_View.TransactionDate.Visible) { // Transactions_View.TransactionDate.Visible (begin)
	<tr id="r_TransactionDate">
		<td class="@(Transactions_View.TableLeftColumnClass)"><span id="elh_Transactions_TransactionDate">@Html.Raw(Transactions_View.TransactionDate.Caption)</span></td>
		<td data-name="TransactionDate" @Html.Raw(Transactions_View.TransactionDate.CellAttributes)>
<span id="el_Transactions_TransactionDate">
<span @Html.Raw(Transactions_View.TransactionDate.ViewAttributes)>@Html.Raw(Transactions_View.TransactionDate.GetViewValue())</span>
</span>
</td>
	</tr>
} @* Transactions_View.TransactionDate.Visible (end) *@
@if (Transactions_View.AccountID.Visible) { // Transactions_View.AccountID.Visible (begin)
	<tr id="r_AccountID">
		<td class="@(Transactions_View.TableLeftColumnClass)"><span id="elh_Transactions_AccountID">@Html.Raw(Transactions_View.AccountID.Caption)</span></td>
		<td data-name="AccountID" @Html.Raw(Transactions_View.AccountID.CellAttributes)>
<span id="el_Transactions_AccountID">
<span @Html.Raw(Transactions_View.AccountID.ViewAttributes)>@Html.Raw(Transactions_View.AccountID.GetViewValue())</span>
</span>
</td>
	</tr>
} @* Transactions_View.AccountID.Visible (end) *@
@if (Transactions_View.Description.Visible) { // Transactions_View.Description.Visible (begin)
	<tr id="r_Description">
		<td class="@(Transactions_View.TableLeftColumnClass)"><span id="elh_Transactions_Description">@Html.Raw(Transactions_View.Description.Caption)</span></td>
		<td data-name="Description" @Html.Raw(Transactions_View.Description.CellAttributes)>
<span id="el_Transactions_Description">
<span @Html.Raw(Transactions_View.Description.ViewAttributes)>@Html.Raw(Transactions_View.Description.GetViewValue())</span>
</span>
</td>
	</tr>
} @* Transactions_View.Description.Visible (end) *@
@if (Transactions_View.Debit.Visible) { // Transactions_View.Debit.Visible (begin)
	<tr id="r_Debit">
		<td class="@(Transactions_View.TableLeftColumnClass)"><span id="elh_Transactions_Debit">@Html.Raw(Transactions_View.Debit.Caption)</span></td>
		<td data-name="Debit" @Html.Raw(Transactions_View.Debit.CellAttributes)>
<span id="el_Transactions_Debit">
<span @Html.Raw(Transactions_View.Debit.ViewAttributes)>@Html.Raw(Transactions_View.Debit.GetViewValue())</span>
</span>
</td>
	</tr>
} @* Transactions_View.Debit.Visible (end) *@
@if (Transactions_View.Credit.Visible) { // Transactions_View.Credit.Visible (begin)
	<tr id="r_Credit">
		<td class="@(Transactions_View.TableLeftColumnClass)"><span id="elh_Transactions_Credit">@Html.Raw(Transactions_View.Credit.Caption)</span></td>
		<td data-name="Credit" @Html.Raw(Transactions_View.Credit.CellAttributes)>
<span id="el_Transactions_Credit">
<span @Html.Raw(Transactions_View.Credit.ViewAttributes)>@Html.Raw(Transactions_View.Credit.GetViewValue())</span>
</span>
</td>
	</tr>
} @* Transactions_View.Credit.Visible (end) *@
</table>
@if (!Transactions_View.IsModal) {
if (!Transactions_View.IsExport()) {
<div><!-- DN -->
@Transactions_View.Pager.Render()
</div>
<div class="clearfix"></div>
}
}
@{ Transactions_View.CloseRecordset(); }
</form>
@Transactions_View.ShowPageFooter()
@ShowDebugMessage()
@ElapsedTime()
@if (!Transactions_View.IsExport()) {
<script>
loadjs.ready("load", function() {

	// Startup script
	// Write your table-specific startup script here
	// document.write("page loaded");

});
</script>
}